% Generated by roxygen2 (4.0.2): do not edit by hand
\name{allowNeighb}
\alias{allowNeighb}
\title{Implement neighbourhood decision rules}
\usage{
allowNeighb(x, cells, categories, rules, ...)
}
\arguments{
\item{x}{a \code{NeighbMaps} object}

\item{cells}{index of non-NA cells in the study region}

\item{categories}{numeric vector containing land use categories. If
\code{allowNeighb} is called from an allocation model this argument
should contain all categories in the simulation, regardless of whether
they're associated with a neighbourhood decision rule}

\item{rules}{a numeric vector with neighbourhood decision rules. Each rule
is a value between 0 and 1 representing the threshold neighbourhood value
above which change is allowed. Rules should correspond with
\code{x@categories}}

\item{\dots}{additional arguments (none)}
}
\value{
a matrix. See \code{\link{allow}}.
}
\description{
Identify legitimate transitions for each cell according to neighbourhood
decision rules.
}
\details{
See \code{\link{allow}}.
}
\examples{
# observed data
obs <- ObservedMaps(x=pie,
                    pattern="lu",
                    categories=c(1,2,3),
                    labels=c("forest","built","other"),
                    t=c(0,6,14))

# create a NeighbMaps object
nb <- NeighbMaps(x=obs@maps[[1]],
                 categories=1,
                 weights=3,
                 fun=mean)

# index of non-NA cells in study region
na.ix <- which(!is.na(getValues(obs@maps[[1]])))

# only allow change to forest within neighbourhood of current forest cells
# note that rules can be any value between zero (less restrictive) and one
# (more restrictive)
nb.allow <- allowNeighb(x=nb,
                        cells=na.ix,
                        categories=obs@categories,
                        rules=0.5)

# NB output is only useful when used within an allocation routine
}

