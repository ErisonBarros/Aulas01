x=obs[[1]]
class(points)
head(points)
length(points)
length(cells)
size=1
train.ix[1:10]
all(points == points[train.ix])
all(points[,1] == points[train.ix][,1])
points[,1]
all(points@data[,1] == points[train.ix]@data[,1])
points[train.ix]
points
train.ix
points
points[1:5]
points[[1:5]]
points[1:5]
class
class(points)
points[train.ix]
all(points[train.ix] == points)
length(points[train.ix])
length(train.ix)
names(ef)
build.form
built.form
class(built.form)
as.character(built.form)
as.character(built.form)[2]
names(built.form)
as.character(built.form)[2]
formula
forms <- list(built.form,forest.form,other.form)
forms <- list(built.form,forest.form,other.form)
dep
match(dep, obs@labels)
forms <- forms[match(dep, obs@labels)]
forms
obs@labels
all(dep %in% obs@labels)
dep
all(obs@labels %in% dep)
object.size(obs)
showMethods("as.data.frame")
isGeneric("as.data.frame")
slotNames(obs)
slotNames(ef)
slotNames(ef)
.RasterList
compareRaster(obs, ef[[1]])
compareRaster(obs, ef@maps[[1]])
lapply(ef@maps, FUN=function, compareRaster(obs, x))
lapply(ef@maps, FUN=function compareRaster(obs, x))
lapply(ef@maps, FUN=function compareRaster(obs, x))
lapply(ef@maps, FUN=function(x) compareRaster(obs, x))
sapply(ef@maps, FUN=function(x) compareRaster(obs, x))
r <- as.raster(matrix())
r
class(r)
compareRaster(r,x)
compareRaster(r,obs)
obs
r
as.raster(matrix(data=1, nrow=10, ncol=10))
raster(matrix(data=1, nrow=10, ncol=10))
r <- raster(matrix(data=1:100, nrow=10, ncol=10))
r
compareRaster(r,obs)
compareRaster(r,obs,stopiffalse=FALSE, showwarnings=TRUE)
compareRaster(r,obs,stopiffalse=FALSE)
compareRaster(r,obs,stopiffalse=FALSE,showwarning=TRUE)
is(r, "Spatial")
points
is(points, "Spatial")
inherits(points, "SpatialPoints")
cells <- part$test
xyFromCell(obs, cells)
cells
part
part$train
cells <- part$train
xyFromCell(obs, cells)
extract(obs,points)
r
extract(r,points)
head(extract(r,points))
length(ef)
names(ef)
x <- obs[[1]]
x[!is.na(x)] <- 1
x
plot(x)
compareRaster(
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
devtools::document()q
q9)
q()
n
devtools::load_all()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
PredModels
input
df <- as.data.frame(input)
input@ef@maps
df <- as.data.frame(input)
q()
n
devtools::document()
dmd
df <- as.data.frame(input)
showMethods("as.data.frame")
q()
n
devtools::document()
df <- as.data.frame(input)
part$train
df <- as.data.frame(input, cells=part$train)
length(part$train)
q()
n
devtools::load_all()
df <- as.data.frame(input, cells=part$train)
dim(df)
head(df)
head(df)
all.equal(df, train.df)
all.equal(df[,1],train.df[,1])
dim(df)
dim(train.df)
head(df)
head(train.df)
train.df <- train.df[,-1]
dim(train.df)
all.equal(df[,1],train.df[,1])
all.equal(df[,2],train.df[,2])
all.equal(df[,3],train.df[,3])
all.equal(df[,4],train.df[,4])
all.equal(df[,5],train.df[,5])
all.equal(df[,6],train.df[,6])
)
forms
names(ef)
q()
n
devtools::load_all()
 class(glm.models)
 glm.models
plot(glm.perf)
glm.perf
class(glm.perf)
plot(glm.perf)
x@performance
glm.perf@performance
plot(glm.perf@performance[[1]])
plot(glm.perf@performance[[2]])
plot(glm.perf@performance[[3]])
names(glm.perf)
x <- glm.perf
q()
n
devtools::load_all()
glm.perf
q()
n
devtools::load_all()
q()
n
devtools::load_all()
clues.model
clues.model
clues.model
slotNames(clues.model)
clues.model@categories
clues.model@categories
clues.model
showMethods("performance")
glm.perf
summary(glm.perf)
q()
n
devtools::document()
q()
n
devtools::document()
glm.models
names(glm.models)
names(test.data)
glm.perf@auc
system.time(extract(obs[[1]], part1$train)
)
system.time(extract(obs[[1]], part2$train)
)
cr
sapply(ef@maps, FUN=function(y) compareRaster(obs, y, extent=FALSE, stopiffalse=FALSE, showwarnings=TRUE))
sapply(ef@maps, FUN=function(y) compareRaster(obs, y))
sapply(ef@maps, FUN=function(y) compareRaster(obs, y, extent=FALSE))
sapply(ef@maps, FUN=function(y) compareRaster(obs, y, extent=FALSE, stopiffalse=FALSE, showwarning=TRUE))
system.time(extract(obs[[1]], part1$train)
)
system.time(extract(obs[[1]], part1$train, method="bilinear"))
q()
n
devtools::load_all()
q()
n
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::check(".",args=c("--no-examples"))
q()
n
devtools::document()
q()
n
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::document()
q()
n
devtools::check(".", c("--no-examples"))
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::document()
q()
n
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::document()
showMethods("as.data.frame")
df <- as.data.frame(input)
df <- as.data.frame(input, 
head(train.data)
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::check(".", args="--no-examples")
obs
ef
ef
ef
ef
ef
input
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::load_all()
obs
ef
glm.pred
glm.perf
glm.models
glm.models
pred <- glm.pred@prediction[[1]]
class(pred)
slotNames(pred)
length(pred)
length(pred@labels)
pred@labels
class(pred@labels)
length(pred@labels[[1]])
length(pred@labels[[2]])
length(pred@labels[[2]])
obs
length(test.df)
length(test.data)
dim(test.data)
slotNames(pred)
pred@fn
pred@tn
pred@prediction[[1]][1:10]
pred@predictions[[1]][1:10]
names(pred@predictions)
slotNames(pred)
names(pred@labels)
length(pred@labels)
attr(pred)
pred
class(pred)
summary(pred)
glm.pred
clues.model
input
input
input
input
input
nchar(dmd[1,])
input@time
format(time)
format(input@time, width=3)
format(input@time, width=3, justify="right")
format(input@time, width=3, justify="left")
format(input@time, width=-3, justify="right")
formatC(input@time, width=-3)
format(input@time, width=-3)
formatC(input@time, width=-4)
input
input
input
input@obs@labels
input
input
input
input
input
input
input
input
input
input
input
input
clues.model
clues.model
clues.model
clues.model@obs@labels
object <- clues.models
object <- clues.model
type
clues.model
clues.model
ordered.mode
ordered.model
ordered.model@order
ordered.model
ordered.model
clues.model
rasterVis::levelplot(clues.model@output)
clues.tabs
clues.agr
clues.agr
plot(clues.agr)
summary(model.input)
summary(input)
summary(clues.fom)
summary(clues.agr)
summary(clues.tabs)
summary(ordered.model)
summary(ef)
summary(neighb)
summary(nb)
nb
summary(nb)
summary(nb[[1]])
summary(nb)
summary(
m <- matrix(data=1, nrow=5, ncol=2)
m
as.data.frame(m)
q()
n
devtools::document()
devtools::document()
q()
n
devtools::document()
plot
q()
n
plot
as.data.frame
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
q()
n
devtools::document()
plot(x=c(1,2,3),y=c(1,2,3))
x <- clues.model
output
levels(output)
levels(output)[[1]]
output <- ratify(output)
output <- ratify(output[[1]])
levels(output)
rat <- levels(output)[[1]]
rat
rat$classes <- x@categories
rat
rat$classes <- x@labels
rat
rat$ID <- x@categories
rat
class(rat)
rat <- data.frame(ID=
rat
levels(output) <- rat
levels(output)
rasterVis::levelplot(output)
output
levels(output)
output
output
levels(output)
rasterVis::levelplot(output)
x@t
x@time
names(output)
names(output)
x=obs
names(x)
x
names(s)
x=obs
plot(obs)
q()
n
devtools::document()
plot(obs)
q()
n
devtools::check(".", args="--no-examples")
q()
n
devtools::document()
q()
n
devtools::check(".", args=c("--no-examples"))
q()
n
devtools::document()
q()
n
devtools::check(".", args="--no-examples")
q()
n
devtools::document()
q()
n
